Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-10-24T08:56:43+01:00

====== RxJava ======
Created Monday 24 October 2016

https://realm.io/news/intro-to-rxjava/

[Observable]	emits items
	|
[Operator]	transform items
	|		   operators are chainable
[Subscriber] consume those items, can be empty

===== Asynchronous Ideals =====

* Explicit execution
	* Create async tasks without needing to execute them immediately.
	* This allows you to build up a picture of what you want to execute.
	* Kick it off when it's just right
	* //Scenarios: this would simplify the internals by removing the non-deterministic issue when datasources are involved.//
* Easy thread management
* easily transformable
	* things are interdependent
	* chaining tasks together
* as few side affects as possible

In traditional programming the fundamental unit is the object.
In Reactive Programming it is the stream of events.

===== RX =====
* explicitly started, you have to subscribe for anything to happen
* subscribeOn, observeOn for thread management
* easy to transform
* good at minimizing side affects

==== Fast facts ====
Reactive extensions
composing async events
javascript, swift, java, ..

==== Key Points ====
Observables
	represent async data streams
LINQ queries
	compose streams with operators
Schedulers
	manage concurrency within streams


==== Observables ====
streams of data
pull based
create, store and pass around
hide away all the complexity with threading sync & concurrency
Immutable, operators always produce a new Observable.

=== Factory analogy ===
start with raw material
conveyor belts
input is shaped into a product
using multiple conveyor belts

put in raw material, shape it in many ways, and we get our output

Put data in and get data out.
You create an observable from some data, a single element, a list, .....
It's like streams in java8, //I wonder is it built on streams//

//Observable.create<String> { s ->//
	s.OnNext("vnwfjk")
	s.onCompleted() }
	
what do we need from a stream
	what's the next bit of data (onNext)
	is there anything left to do (onComplete)
	did any errors happen (onError)
	
	onError and onComplete are terminal operations in a stream
		only difference is why the stream is ending


==== Operators ====
So many
combining, filtering / reducing, ...
Stream operations! just like the java8 tutorials
RxMarbles website

==== Schedulers ====
**without subscribe nothing happens**

can take 0..3 functions (onNext, onError, onComplete)
always pass onError
subscribeOn & oberserveOn: manage where code is run

.subscribe returns a subscription
useful for clean up

subscribeOn 
should only be used once, any downstream ones will be ignored
defaults to run on thread observable was created on

observeOn
use as many times as needed
affects everything down stream
switch thread for the subsequent stream operations

**Unit is the null type**
**String? => lik Optional return the value or null**

Dan Lew series of blog posts

==== Exceptions ====
Are treated as first class citizens in reactive programming.
No point to throw an exception so it is passed as an event in the stream.

==== Bask pressure???? ====

==== Timing streams of events ====
You can create an Observable that emits events at a regular pace.

Observable.interval(amount, unit)

==== Example Operators ====
Apparently a great site to see how an operator will work

=== range(i, n) ===
emit a stream of numbers beginning at i until n

=== zip(Observable, Function) ===
combine the elements of the source stream with the supplied stream using the function.

=== flatMap ===
takes events from an Observale and maps each event to a single oberserval, then flattens those observables into a single obserable.

=== distinct() ===
only pass on distinct events. (think sql distinct)

=== sorted() ===
sort the events alphabetically / numerically

=== merge() ===
merge upto 9 streams of events together into a single thread

=== debounce() ===
Remember 2nd electronics, make sure you only get one click of a button
in rxJava it treats all events within a specified time delay as a single event, only returning the last one.

=== amb() ===
ambiguous
conditional operator
given x streams it selects the first strema that emits as it's input and ignore all others.


https://www.infoq.com/articles/rxjava-by-example
