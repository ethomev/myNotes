Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-09-30T09:19:58+01:00

====== 1. Lambda Expressions ======
Created Friday 30 September 2016

Facilitate functional programming and simplifies development

Collections.sort(names, (s1, s2) -> s1.compareTo(s2));
	Sort the collection names by it's comparator

A lambda corresponds to a given type, specified by an interface with a single method (functional interface). [default methods can be added to a functional interface, not sure what purpose they would serve. Do something with the result]

==== Declaring Lambdas ====
Syntax
(parameter(s)) -> {expression body}

Important characteristics
1. Optional type declaration. Compiler can infer the type from the value of the parameter
2. Optional parenthesis around single parameter, multiple parameters parenthesis is mandatory
3. Optional curly braces. No need for curly braces if body is single line
4. Optional return keyword. 

==== Using Lambdas ====

Assign Lambda to interface.
Looks like interface can have only one method, yup it's a Functional Interface

Used primarily to define inline implementation  of a functional interface
functional interface: an interface with a single method only.
Eliminate the need for anonymous classes

===== Scope =====

Very similar to anonymous objects
You can access final variables, instance fields and static variables.

==== local variables ====
But different to anonymous objects local variables don't have to be declared final
But they effectively are as if you try and change the variable afterwards the lamba expressions shows a compiler error
And we can't write to outer scope variables from within the lamba expression, when they are initialized before the lambda.
	If they aren't initialized we can initialize them in the lambda


==== Fields and static variables ====
We have both read and write access to instance fields and static variables

==== Default methods ====
Can't be accessed from within lambda's
