Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-16T08:43:00+00:00

====== 1. Adaptor Pattern ======
Created Thursday 16 March 2017

GoF Definition: Convert the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces. 

Retrofit a new interface over an existing class to adapt it to your needs.
Can also protect your product from changes in a 3pp.
	Put a layer over the 3pp you use and if it changes there's only one place your project needs to change

Analogy: socket adapters from Uk to US

==== Implementation ====
2 typs of implementations of this pattern: Object Adaptor & Class Adaptor
Object: The Adaptor implements the desired interface and is composed of the desired adaptee.
Class: The adaptor implements the desired interface and extends the adaptee.

The scenario-rx-taf-adaptor module contains adaptor classes between TAF & RX Scenario data, context & test step related classes.
The taf-ui module contains adaptors for ui-test-toolkit
SeleniumUiMediator adapts Selenium WebDriver to UiMediator

==== Pros ====
protection against changes in adaptee
loose coupling

==== Cons ====
Extra class on your side

=== Class Adaptor ===
can't extend any other class
can't adapt subclasses of adaptee
may not be able to extend adaptee, as I saw in my implementation of the pattern

==== Uses ====
A lot in Eclipse plugins, allows plugins to be loosely couple, yet still be intergrated into the Eclipse runtime

==== Indicators for use ====

1. You use a 3pp who's interface doesn't match your concepts
2. It could be also said that you use this pattern to protect against changes in the 3pp, which is very similar to the [[../2._Facade_Pattern.txt|Facade]]

==== My Thoughts ====
Is this very similar to the Facade pattern? Are they the same thing?
	They have similarities but different goals.
		Adaptor:	Enable plug and play with similar but incompatible interfaces.
					by reusing existing interfaces
		Facade:	Simplify/Control access to an API.
					by creating a new interface
	MY implementation of this pattern is more a facade
I prefer the object implementation
	it gives the adaptor freedom to extend another class if it requires
	As an example SeleniumUiMediator wouldn't have been able to extend AbstractUiEventProcessor which gives base functionality for processing events
The level of adapting in the adaptor can be anything from a simple interface change to behaviour change
In my practical example the API I'm adapting doesn't easily allow me to extend it: https://github.com/ethomev/pattern-play/tree/master/src/main/java/com/melville/tom/adaptor
	Another reason to go with the object version of the pattern
