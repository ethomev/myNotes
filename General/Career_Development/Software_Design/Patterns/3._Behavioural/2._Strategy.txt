Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-28T15:59:53+01:00

====== 2. Strategy ======
Created Tuesday 28 March 2017

Dynamically swap out **whole** algorithms (application logic) at runtime.
Dynamically changing behaviours.
Manage algorithms, relationships and responsibilties between objects.

GoF Definition: Defines a set of encapsulated algorithms that can be swapped to carry out a specific behaviour.
Example: Calculate interest based on account type.

Steps:
1. Define an interface that identities the inputs and outputs of the algorithm.
2. Create implementations of the interface, each one is a different strategy.

You still need to know when to create what implementation!
	This is where the factory pattern complements the Strategy pattern nicely.
	This works when you want to decide for the client what impl should be created.
	when the client knows they can set the impl and remove the need for the factory.

GoF talks about the Context which is composed of the Strategy.
	It has a method to set the strategy impl and call the stategy algorithm.

You can include a default strategy that is applied as a last resort, this is it's own pattern: Null Object / Special Case.

===== When to use =====
When there is an algorithm and all parts are specific to each implementation.
Where there are common parts consider the Template Method pattern

===== My Thoughts =====
I think I've used this pattern without knowing it's name.
Thinking about it when there are multiple implementations of an interface isn't this a Strategy?

==== Thoughts from Dmitry's comments below ====
Logic in constructor which only sets certain fields which are used in methods is a red flag, this drives null checks which is another red flag
String driven logic is an anti-pattern


===== Thoughts from Dmitry =====
(02:24:25 PM)	 Thomas Melville (Lync):	 Hi Dmitry
(02:24:44 PM)	 Thomas Melville (Lync):	 Whenever you have time could I ask you about one of your comments on Kian's review?
(02:24:45 PM)	 Thomas Melville (Lync):	 https://gerrit.ericsson.se/#/c/1800358/6/taf/taf-api/src/main/java/com/ericsson/cifwk/taf/datasource/DataRecordFieldReplacement.java
(02:24:53 PM)	 Thomas Melville (Lync):	 Specifically about the Strategy
(02:51:59 PM)	 Dmitry Novikov:	 Hello, yes, sure
(02:52:14 PM)	 Dmitry Novikov:	 Whats the question?
(02:56:32 PM)	 Thomas Melville (Lync):	 Did you decide on Strategy because you saw if / else statements which all returned the same type of object?
(02:57:04 PM)	 Thomas Melville (Lync):	 I've been learning about patterns on and off for a long time and the hardest part is to know where to apply them
**(03:02:48 PM)	 Dmitry Novikov:	 Ok so there conditions in constructor that set fields that are used in condtions in findColumnValue. This looks overcomplicated, and error prone. Plus null driven logic is always a red flag. And basicaly one class serves two purporses. As class contains actions its looks like strategy pattern could be applied here.**
(03:07:06 PM)	 Dmitry Novikov:	 Some design patterns are much more useful and aplicable than others. Strategy in my opinion is one of most useful, so I keep it in mind
(03:07:55 PM)	 Dmitry Novikov:	 Have I've answered your question? :)
(03:09:47 PM)	 Thomas Melville (Lync):	 Yes. Thanks
(03:09:58 PM)	 Thomas Melville (Lync):	 One more question
(03:10:17 PM)	 Thomas Melville (Lync):	 How would you decide what strategy to use? A Factory?
(03:11:49 PM)	 Thomas Melville (Lync):	 As I learned the Strategy pattern I realized it was something I had used without knowing the name of it. It is quite useful
(03:13:30 PM)	 Dmitry Novikov:	 Yep, names are just to simplify discussion between developers :)
(03:13:36 PM)	 Dmitry Novikov:	 And pass interviews
(03:15:10 PM)	 Thomas Melville (Lync):	 ha ha
(03:15:10 PM)	 Thomas Melville (Lync):	 yes
(03:15:31 PM)	 Thomas Melville (Lync):	 and some guys wrote a book in the 1990's and the names stuck
(03:16:29 PM)	 Dmitry Novikov:	 >How would you decide what strategy to use
(03:16:29 PM)	 Dmitry Novikov:	 In place where object is created, ie Test Scenarios#fromDataSourceField. **As condition is simple (2 clauses) is possible to use IF, as factory would be overhead**. This would be huge improvement over existing code, as logic is moved away from constructor
(03:17:11 PM)	 Dmitry Novikov:	 Even better would create two methods fromDataSourceField(String ) and fromDataSourceField(String, String)
(03:18:13 PM)	 Dmitry Novikov:	 In this case we will eliminate conditions and all. Also cases where user might put multiple dots in name. **As String driven logic is also anti-pattern**, especially if its user input
(03:19:19 PM)	 Dmitry Novikov:	 And you can use variable names as hint to users
(03:21:05 PM)	 Thomas Melville (Lync):	 I see now. It's only used in one place so a factory would be quite an overhead, and there's no sign of a new datasource type coming along in the future
(03:21:33 PM)	 Dmitry Novikov:	 Exactly :)
(03:21:55 PM)	 Thomas Melville (Lync):	 Great, thanks Dmitry
(03:22:03 PM)	 Dmitry Novikov:	 Always welcome
(03:22:13 PM)	 Thomas Melville (Lync):	 :-)
