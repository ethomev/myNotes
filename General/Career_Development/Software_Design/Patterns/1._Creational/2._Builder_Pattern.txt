Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-08-10T11:35:46+01:00

====== 2. Builder Pattern ======
Created Wednesday 10 August 2016

This pattern allows us to write readable, understandable code to set up complex objects.

When a class has many overloaded constructors with arguments of the same type, consider the builder pattern. //(A candidate for this would have been the CliCommandHelper)//
Issues:
	Many overloaded constructors with many arguments can lead to errors in object creation, which can lead to obscure bugs down the line.
	more arguments + more constructors makes the code hard to read
	
This pattern solves 2 problems
	1. Too many constructor arguments
	2. Incorrect object state
		a. Builder can have logic to stop creation of object if certain fields aren't set

Builder can also enforce order of method calls before creation of object (scenario rx flow builder does this)

Often implemented with a FluentInterface, **this is the only way I've seen**
	return the builder after every method call.

Builder will contain all the fields of the class to build.
Builder will have a set<field> method for every field. The "set" word can vary.
A build method when we have all fields set.
Class to build can have a private constructor so only the builder can build it.
	This leads to other issues!!!!

https://dzone.com/articles/design-patterns-the-builder-pattern has the Builder as a static inner class of the class to build.
	I think this would lead to issues in multi threading
		2 threads try to build an instance
		all fields are static so only one instance exists
		
In TAF All the builders are located in classes separate to the class to be built.
Also creating the builders are all in one central class.
	They are static methods but return new instances of each builder so no concurrency issues

I see 4 different structures to the builder pattern, which is the best? Or is there a best one

1. -----------------
ClassToBuild{
	private ClassTobuild(){}
	Builder{
		public constructor
	}
}

2. ---------------
ClassToBuild{
	private ClassTobuild(){}
	getBuilder();
	Builder{
		private constructor
	}
}

3. ---------------
ClassToBuild{
	private ClassTobuild(){}
	Builder{
		private constructor
		getBuilder();
	}
}

4-------------
Builder{
	public constructor
}

ClassToBuild{}

===== My Thoughts =====
For ease of use I think the builder should be inside the class to be built, as all the articles have it.
	Following on from that the class to be built should have a private constructor to limit creation to through the builder.
Should the builder be static
	I don't think so
	But I'm snookered
	since the class to be built has a private constructor I need to create the builder statically, and an instance can't be referenced from a static context. So the builder will end up being static.
	I was about to say builder in separate class but that means it can't create the object if it has a private constructor.
		change the scope ofthe constructor of the object to be package level to allow the builder access to it.
			But then if it's package level no one outside the package will see it.
When building the class constructors or set fields.
	Overloaded constructors would just end up in one of the same problems this is trying to solve.
	It depends on the Class you are building.
		Small number of arguments use a constructor
		many arguments set the fields.
	I see the builder is passed into the class to be built in the cm test library
		When the builder and class to build are in separate files I like this idea.
		Make the fields of the builder protected and the class to build can view them
		This keeps the scope of everything small
		This also doesn't allow the class to be built to be built without using the builder
			when a constructor is specified the default isn't created.
			

==== 2 Choices for this pattern. ====
1. Builder is static inner class and class to build has private constructor.
	a. Removes chance of someone creating the class incorrectly.
	b. Possible concurrency issues.
2. **Builder is separate class and class to build has public constructor which takes the builder**
	a. **Removes the chances of concurrency issues.**
	b. **Possibility that someone may create class incorrectly.**
		a. **This is overcome by passing in the builder in the constructor of the class to be built**


**I think I'll go with choice 2 whenever I'm implementing this pattern!**

==== Questions to ask when thinking about this pattern ====
1. Will there be concurrency? Is there a chance the builder could be used by 2 threads simultaneously?
2. Is it vital to bloke users from creating the object without the builder? Can we just call them stupid if they do?

==== Downsides ====
More code involved in creating an object.
If the builder is static could lead to concurrency issues but if it's not you can't block users directly creating ther object

==== Indicators for use ====
Class has many fields that may or may not be set.
you want to ensure that the object ends up in a certain state after creation
