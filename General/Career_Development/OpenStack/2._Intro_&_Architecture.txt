Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-01-03T10:29:34+00:00

====== 2. Intro & Architecture ======
Created Tuesday 03 January 2017

===== What is Open Stack? =====

open source community focused on developing a software platform for building private and public clouds.
A suite of products:
	**Compute (Nova)**
	**Block Storage (Cinder)**
	**Object Storage (Swift)**
	**Networking (Neutron)**
	Dashboard (Horizon)
	Metering (Ceilometer)
	**Identity (Keystone)**
	**Image Management (Glance)**
	Orchestration (Heat)
	
	Core products are in bold.
	All others are optional, and there are many others.
	
Cloud operating system that controls large pools of compute, storage and networking resources throughout a data centre.
All managed through a dashboard
	gives admins power and allowing users to provision resources through a web interface.

Interaction between products is through RESTful API's.
Interaction between sub-components within a product is on a Message Queue (RabbitMQ)

===== Horizon =====
UI dashboard for managing cloud.
stateless
gets updated via API polling
dashboards for each component are individual nested django applications

===== Keystone =====
provides identity, token, catalog and policy services
is all about identity and authorization to products within the cloud (compute, network, storage, ...)
and projects within the cloud area.
RBAC

===== Nova =====
**Nova DB** stores current state of all objects in compute cluster
sends rpc.cast to scheduler on queue
**Nova Scheduler** is a daemon, which determines, on which compute host the request should be run. (provision time component)
	scheduler can filter what requests get created on what compute host
	scheduler puts message on queue
**nova-compute** is a worker daemon which primarily creates and terminates VMs via a Hyperviser API
A number of Hypervisers can be used, libvirt & kvm are most common
VM rendering is delegated to Hypervisor
**Nova Conductor **service is key to completing no-db-compute
nova-compute sends rpc.call to conductor to access db, to get/update vm information
	eliminates remote DB access for security


===== Neutron =====
network as a service
manage network topologies
separate description of network connectivity from it's impl
multiple plugins to communicate with and control the network
network provisioning flow depends on the plug-in
Config flow:
	allocate MAC addresses
	Allocate IP addresses
	Associate IP and MAC with VM
	Setup Network: L2
	Setup Network: L3
nova-compute talks to neutron to privision network for the instance

===== Cinder =====
Block Storage as a service
3 storage concepts in Open Stack:
	Ephemeral
		persists until VM is terminated.
		accessible from within VM as local file system
		used to run OS and/or scratch space.
		managed by Nova
	Block
		persists until deleted by user
		accessible from within VM as a block service
		add additional persistent storage to VM/OS
		managed by Cinder
	Object Storage
		persist until deleted by user
		accessible from anywhere
		store file, including VM images
		managed by Swift
Resources
	Volumes
		persistent R/W block of storage device
		Can be:
			attached to VM as secondary storage
			root store to boot VMs
			attached at most one instance at a time
			transferred between projects
		keeps its state independent of an instance
	Snapshots
		read-only point in time copy of a volume
		can be used to create a new volume
	Backup
nova-compute contacts Cinder to get volume data.
attach volumes after VM is built
nova-compute sets up host mount and instructs Hypervisor to use volume

===== Glance =====
Images-as-a-service
Service for creating, discovering, registering and retrieving VM images
Definition of an image:
	copy of the entire contents of a storage device, HD, CD, other storage media
	includes all partition info, boot sectors, file allocation table, OS installation and application software.
Image creation steps
	get OS ISO
	Create VM
	Install OS
		start vm with ISO connected as CD-ROM
		connect to VM via VNC
		Install OS as normal
		install & configure cloud-init
	Prepre and cleanup image
		install any additional applications
		Remove MAC address details
many disk formats supported for images.
nova-compute requests VM image from Glance via image ID
	URI is returned which points to actual image as stored in swift.
To allow caching image copy can go through Glance

===== Swift =====
Stores objects
Can be images


===== Provision a VM =====
1. Login into **Horizon**
2. **Keystone **authorizes
3. specify parameters
	a. name
	b. image
	c. flavour (CPU, memory, disk, ...)
	d. network (ssh keys, persisten volumes, ...)
4. **Nova **initiates provisioning and saves state to DB
5. **Nova Scheduler **finds appropriate host
6. **Neutron **configures networking
7. **Cinder **provides block device
8. Image URI is looked up through **Glance**
9. Image is retrieved via **Swift**
10. VM is rendered by Hypervisor
